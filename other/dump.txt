// priority scheduling
import Process from "./Process.js";
import CPUScheduler from "./CPUScheduler.js";

export default class OperatingSystem {
    constructor() {
        this.newQueue = [
            new Process(0, 4, 2),
            new Process(1, 3, 1),
            new Process(2, 2, 3),
            new Process(3, 3, 1),
            new Process(4, 5, 4),
        ];
        this.readyQueue = new CPUScheduler();
        this.terminateQueue = [];

        this.timer = 0;
        this.currentTime = 0;
        this.i = 0;
        /**
         * @type {Process | null}
         */
        this.currentProcess = null;
    }

    handleNewQueue() {
        while (this.i < this.newQueue.length && this.newQueue[this.i].arrivalTime === this.currentTime) {
            this.readyQueue.push(this.newQueue[this.i]);
            this.i++;
        }
    }

    dispatcher() {
        // Preempt if needed
        if (this.currentProcess && !this.readyQueue.isEmpty()) {
            const top = /** @type {Process} */this.readyQueue.top();
            if (top.priority < this.currentProcess.priority) {
                this.readyQueue.push(this.currentProcess);
                this.currentProcess = this.readyQueue.top();
                this.readyQueue.pop();
            }
        }

        // Assign process if idle
        if (!this.currentProcess && !this.readyQueue.isEmpty()) {
            this.currentProcess = this.readyQueue.top();
            this.readyQueue.pop();
        }
    }

    update(deltaTime) {
        this.handleNewQueue();
        this.dispatcher();

        // Run current process for 1 unit
        if (this.currentProcess) {
            this.currentProcess.remainingTime--;
            if (this.currentProcess.remainingTime === 0) {
                this.currentProcess.completionTime = this.currentTime + 1;
                this.terminateQueue.push(this.currentProcess);
                this.currentProcess = null;
            }
        }

        if (this.terminateQueue.length == this.newQueue.length)
            this.printSummary();

        this.timer += deltaTime;
        this.currentTime = Math.floor(this.timer);
    }

    printSummary() {
        this.terminateQueue.sort((a, b) => a.id.localeCompare(b.id));

        console.log("ID\tAT\tBT\tP\tCT\tTAT\tWT");
        this.terminateQueue.forEach(p => {
            console.log(`${p.id}\t${p.arrivalTime}\t${p.burstTime}\t${p.priority}\t${p.completionTime}\t${p.turnaroundTime}\t${p.waitTime}`);
        });
    }
}

export default class Process {
    static #index = 1;
    
    /**
     * @param {number} at 
     * @param {number} bt 
     * @param {number} priority 
     */
    constructor(at, bt, priority) {
        this.id = "P" + Process.#index++;
        this.arrivalTime = at;
        this.burstTime = bt;
        this.remainingTime = bt;
        this.priority = priority;
        this.completionTime = 0;

        this.color = `hsl(${Math.floor(Math.random() * 256)}, 100%, 50%)`
        this.x = 0;
        this.y = 0;
        this.w = 40;
        this.h = 40;
    }

    /**
     * @param {CanvasRenderingContext2D} ctx
     */
    draw(ctx) {
        ctx.fillStyle = this.color;
        ctx.fillRect(this.x + 1, this.y + 1, this.w - 2, this.h - 2);
        ctx.fillStyle = "black";
    }

    get turnaroundTime() {
        return this.completionTime - this.arrivalTime;
    }

    get waitTime() {
        return this.turnaroundTime - this.burstTime;
    }
}

//////////////////////////////////////////////

<!--
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Priority Scheduling Simulation</title>
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap" rel="stylesheet">
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    main {
      display: flex;
      flex-direction: column;
      height: 100svh;
    }
    
    * {
      background-color: rgba(255, 00, 0, 0.1);
      border: 1px solid red;
    }

    .top {
      display: flex;
      height: 80%;
    }

    .simulation {
      width: 70%;
    }

    .summary-table {
      width: 30%;
    }

    .gantt-chart {
      height: 20%;
    }

    canvas {
      border: 1px solid #ccc;
      background: transparent;
    }

    .controls {
      display: flex;
      gap: 1rem;
      margin-bottom: 1rem;
    }
    button {
      padding: 0.5rem 1rem;
      font-size: 1rem;
      background: #4f46e5;
      color: white;
      border: none;
      border-radius: 6px;
      cursor: pointer;
    }
    button:hover {
      background: #4338ca;
    }

    table {
      border-collapse: collapse;
      width: 50%;
      margin-top: 1rem;
    }
    th, td {
      border: 1px solid #ccc;
      padding: 0.5rem;
      text-align: center;
    }
    th {
      background-color: #e0e7ff;
    }
  </style>
</head>
<body>
  <div class="add-process"></div>
  <main>
    <div class="top">
      <div class="simulation">
        <canvas id="sim-canvas"></canvas>
        <div class="controls">
          <button id="startBtn">Start</button>
          <button id="pauseBtn">Pause</button>
          <button id="stepBtn">Step</button>
          <button id="resetBtn">Reset</button>
        </div>
      </div>
      <div class="summary-table">
        <table>
          <thead>
            <tr>
              <th>ID</th>
              <th>AT</th>
              <th>BT</th>
              <th>CT</th>
              <th>TAT</th>
              <th>WT</th>
            </tr>
          </thead>
          <tbody id="summaryTable">
            
          </tbody>
        </table>
      </div>
    </div>
    <div class="gantt-chart">
      <canvas id="gantt-canvas"></canvas>
    </div>
  </main>
  <script type="module" src="src/main.js"></script>
</body>
</html> -->

//////////////////////////////////////

// class PriorityQueue {
//     /**
//      * @param {(a: any, b: any) => boolean} campareFunc
//      */
//     constructor(campareFunc) {
//         this.heap = [];
//         this.campareFunc = campareFunc;
//     }

//     /**
//      * @returns {number} length
//      */
//     get length() {
//         return this.heap.length;
//     }

//     /**
//      * @param {any} data
//      */
//     enqueue(data) {
//         this.heap.push(data);
//         this.#heapifyUp();
//     }

//     dequeue() {
//         if (this.isEmpty()) return null;
//         const top = this.heap[0];
//         const last = this.heap.pop();
//         if (!this.isEmpty()) {
//             this.heap[0] = last;
//             this.#heapifyDown();
//         }
//         return top;
//     }

//     peek() {
//         return this.heap[0] || null;
//     }

//     isEmpty() {
//         return this.heap.length === 0;
//     }

//     #heapifyUp() {
//         let i = this.heap.length - 1;
//         while (i > 0) {
//             const parent = Math.floor((i - 1) / 2);
//             if (this.#compare(i, parent)) {
//                 [this.heap[i], this.heap[parent]] = [this.heap[parent], this.heap[i]];
//                 i = parent;
//             } else break;
//         }
//     }

//     #heapifyDown() {
//         let i = 0;
//         while (true) {
//             const left = 2 * i + 1;
//             const right = 2 * i + 2;
//             let smallest = i;

//             if (left < this.heap.length && this.#compare(left, smallest)) smallest = left;
//             if (right < this.heap.length && this.#compare(right, smallest)) smallest = right;

//             if (smallest !== i) {
//                 [this.heap[i], this.heap[smallest]] = [this.heap[smallest], this.heap[i]];
//                 i = smallest;
//             } else break;
//         }
//     }

//     /**
//      * @param {number} i
//      * @param {number} j
//      */
//     #compare(i, j) {
//         const a = this.heap[i], b = this.heap[j];
//         return this.campareFunc(a, b);
//     }
// }
  
// export default class CPUScheduler {
//     constructor() {
//         this.readyQueue = [];
//     }

//     push(process) {
//         this.readyQueue.push(process);
//     }

//     pop() {
//         return this.readyQueue.shift();
//     }

//     top() {
//         return this.readyQueue[0];
//     }

//     isEmpty() {
//         return this.readyQueue.length == 0;
//     }

//     length() {
//         return this.readyQueue.length;
//     }

//     data() {
//         return this.readyQueue;
//     }

//     clear() {
//         this.readyQueue.length = 0;
//     }
// }

///////////////////////Gantt chart///////////


        const canvas = /** @type {HTMLCanvasElement} */ (document.getElementById("gantt-canvas"));
        canvas.width = this.canvas.clientWidth;
        canvas.height = 100;
        canvas.style.border = "1px solid black";
        if (!canvas) throw new Error("Gantt chart canvas not found");
        const ctx = canvas.getContext("2d");
        if (!ctx) throw new Error("Browser doesn't support 2d rendering canvas");
        ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
    
        const boxHeight = 50;
        const startX = 10;
        const startY = 10;
        const boxWidth = 40; // Width for fully completed 1 time unit (for finished processes)
        
        let x = startX;
        
        // Draw finished processes
        ganttChart.forEach(pid => {
            const p = Process.get(pid);
    
            const color = p ? p.color : "gray";
            ctx.fillStyle = color;
            ctx.fillRect(x, startY, boxWidth, boxHeight);
    
            ctx.strokeStyle = "black";
            ctx.strokeRect(x, startY, boxWidth, boxHeight);
    
            ctx.fillStyle = "black";
            ctx.font = "16px Arial";
            ctx.textAlign = "center";
            ctx.textBaseline = "middle";
            ctx.fillText(pid, x + boxWidth / 2, startY + boxHeight / 2);
    
            x += boxWidth;
        });
    
        // Draw currently executing process (smooth progress)
        if (currentProcess !== "") {
            const p = Process.get(currentProcess);
            if (p) {
                const elapsed = p.burstTime - p.remainingTime;
                const progress = elapsed / p.burstTime; // 0.0 to 1.0
                const progressWidth = progress * boxWidth;
    
                ctx.fillStyle = p.color;
                ctx.fillRect(x, startY, progressWidth, boxHeight);
    
                ctx.strokeStyle = "black";
                ctx.strokeRect(x, startY, boxWidth, boxHeight);
    
                ctx.fillStyle = "black";
                ctx.font = "16px Arial";
                ctx.textAlign = "center";
                ctx.textBaseline = "middle";
                ctx.fillText(currentProcess, x + boxWidth / 2, startY + boxHeight / 2);
            }
        }


